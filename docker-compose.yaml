## Docker Compose File for Rubin-LSST DRP Messaging Stack

# Including the docker compose from monitoring to run monitoring services
include:
  - ./monitoring/docker-compose.yaml

services:
  # Zookeeper service for managing Kafka brokers
  zookeeper1:
    # Use the latest version of Confluent Zookeeper
    image: confluentinc/cp-zookeeper:latest
    # Container name for Zookeeper
    container_name: zookeeper1
    # Healthcheck to ensure Zookeeper is running
    healthcheck:
      test: [ "CMD", "zookeeper-shell", "localhost:2181", "ls", "/" ]
      interval: 10s
      timeout: 10s
      retries: 3
    # Always restart the container on failure
    restart: always
    environment:
      # Port for Zookeeper client connections
      ZOOKEEPER_CLIENT_PORT: 2181
      # Tick time for Zookeeper
      ZOOKEEPER_TICK_TIME: 2000
      # Adding the prometheus JMX exporter as a java agent
      EXTRA_ARGS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.2.0.jar=7071:/usr/share/jmx_exporter/zookeeper_jmx_config.yml
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
    volumes:
      # Mount JMX exporter binary file
      - ./monitoring/jmx_exporter:/usr/share/jmx_exporter/
    networks:
      # Attach to the 'lsst' network
      - lsst

  # Kafka broker service
  broker1:
    # Image for Kafka broker
    # Use the latest version of Confluent Kafka
    image: confluentinc/cp-kafka:latest
    # Container name for Kafka broker
    container_name: broker1
    healthcheck:
      # No healthcheck for MirrorMaker 2
      test: ["NONE"]
    # Hostname for Kafka broker
    hostname: broker1
    ports:
      # External port mapping for Kafka broker
      - "9092:9092"
      # Internal port mapping for inter-broker communication
      - "29092:29092"
    depends_on:
      # Ensure Zookeeper starts & is running before Kafka broker
      - zookeeper1
    restart: always
    environment:
      # Unique broker ID
      KAFKA_BROKER_ID: 1
      # Zookeeper connection string
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181'
      # Protocol mapping for listeners
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXT:PLAINTEXT,INT:PLAINTEXT
      # Define listeners for external and internal communication
      KAFKA_LISTENERS: EXT://broker1:9092,INT://broker1:29092
      # Advertised listeners for client connections
      KAFKA_ADVERTISED_LISTENERS: EXT://broker1:9092,INT://broker1:29092
      # Log retention period in hours
      KAFKA_LOG_RETENTION_HOURS: 168
      # Listener name for inter-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: INT
      # Replication factor for offsets topic
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # Adding the prometheus JMX exporter as a java agent
      KAFKA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.2.0.jar=7071:/usr/share/jmx_exporter/kafka_jmx_config.yml
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
    volumes:
      # Mount JMX exporter binary file
      - ./monitoring/jmx_exporter:/usr/share/jmx_exporter/
    networks:
      # Attach to the 'lsst' network
      - lsst

  # Kafka MirrorMaker 2 service for replication
  mirrormaker2:
    # Image for Kafka Connect (used by MirrorMaker 2)
    # Use the latest version of Confluent Kafka Connect
    image: confluentinc/cp-kafka-connect:latest
    # Container name for MirrorMaker 2
    container_name: mirrormaker2
    healthcheck:
      # No healthcheck for MirrorMaker 2
      test: ["NONE"]
    depends_on:
      # Ensure Zookeeper and Kafka broker start before MirrorMaker 2
      zookeeper1:
        condition: service_healthy
      # broker1:
      #   condition: service_healthy
    restart: always
    command:
      # Command to start MirrorMaker 2 with configuration
      - /bin/connect-mirror-maker
      - /etc/kafka-connect/mm2.properties
    volumes:
      # Mount MirrorMaker 2 configuration file
      - ./mm2.properties:/etc/kafka-connect/mm2.properties:ro
      # Mount Log4j configuration file
      - ./kafka-log4j.properties:/etc/kafka-connect/kafka-log4j.properties:ro
      # Mount JMX exporter binary file
      - ./monitoring/jmx_exporter:/usr/share/jmx_exporter/
    environment:
      # Log4j configuration options
      KAFKA_LOG4J_OPTS: -Dlog4j.configuration=file:/etc/kafka-connect/kafka-log4j.properties
      # Adding the prometheus JMX exporter as a java agent
      KAFKA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-1.2.0.jar=7071:/usr/share/jmx_exporter/kafka_jmx_config.yml -Xmx256M -Xms256M
    networks:
      # Attach to the 'lsst' network
      - lsst

  # # IngestD service for DC2 dataset
  # ingestd_dc2:
  #   # Image for IngestD
  #   # Check Butler compatibility before updating version
  #   image: ghcr.io/lsst-dm/ctrl_ingestd:1.9
  #   # Container name for IngestD DC2
  #   container_name: ingestd_dc2
  #   depends_on:
  #     # Ensure Kafka broker is healthy before IngestD
  #     broker1:
  #       condition: service_healthy
  #     # Ensure MirrorMaker 2 is running before IngestD
  #     mirrormaker2:
  #       condition: service_started
  #   restart: always
  #   environment:
  #     # Configuration file for IngestD DC2
  #     CTRL_INGESTD_CONFIG: /tmp/ingestd-configs/dc2.yaml
  #     # Database authentication file
  #     LSST_DB_AUTH: /tmp/db-auth.yaml
  #     # Butler repository index file
  #     DAF_BUTLER_REPOSITORY_INDEX: /etc/butler-repos-index.yaml
  #   volumes:
  #     # Mount various configuration and repository files
  #     - ./butler-repos/butler-repos-index.yaml:/etc/butler-repos-index.yaml:ro
  #     - ./ingestd-configs/hsc_pdr2_multisite.yaml:/tmp/ingestd-configs/hsc_pdr2_multisite.yaml:ro
  #     - ./ingestd-configs/ccms1.yaml:/tmp/ingestd-configs/ccms1.yaml:ro
  #     - ./ingestd-configs/dc2.yaml:/tmp/ingestd-configs/dc2.yaml:ro
  #     - ./db-auth.yaml:/tmp/db-auth.yaml:ro
  #     - ./butler-repos/panda-test-med-1-lancs/butler.yaml:/etc/panda-test-med-1-lancs/butler.yaml
  #     - ./butler-repos/hsc-pdr2-multisite/butler.yaml:/etc/hsc-pdr2-multisite/butler.yaml
  #     - ./butler-repos/ccms1/butler.yaml:/etc/ccms1/butler.yaml
  #     - ./butler-repos/dc2/butler.yaml:/etc/panda-test-med-1/butler.yaml
  #   networks:
  #     # Attach to the 'lsst' network
  #     - lsst

  # # IngestD service for CCMS1 dataset
  # ingestd_ccms1:
  #   # Image for IngestD
  #   # Check Butler compatibility before updating version
  #   image: ghcr.io/lsst-dm/ctrl_ingestd:1.9
  #   # Container name for IngestD CCMS1
  #   container_name: ingestd_ccms1
  #   depends_on:
  #     # Ensure Kafka broker is healthy before IngestD
  #     broker1:
  #       condition: service_healthy
  #     # Ensure MirrorMaker 2 is running before IngestD
  #     mirrormaker2:
  #       condition: service_started
  #   restart: always
  #   environment:
  #     # Configuration file for IngestD CCMS1
  #     CTRL_INGESTD_CONFIG: /tmp/ingestd-configs/ccms1.yaml
  #     # Database authentication file
  #     LSST_DB_AUTH: /tmp/db-auth.yaml
  #     # Butler repository index file
  #     DAF_BUTLER_REPOSITORY_INDEX: /etc/butler-repos-index.yaml
  #   volumes:
  #     # Mount various configuration and repository files
  #     - ./butler-repos/butler-repos-index.yaml:/etc/butler-repos-index.yaml:ro
  #     - ./ingestd-configs/hsc_pdr2_multisite.yaml:/tmp/ingestd-configs/hsc_pdr2_multisite.yaml:ro
  #     - ./ingestd-configs/ccms1.yaml:/tmp/ingestd-configs/ccms1.yaml:ro
  #     - ./ingestd-configs/dc2.yaml:/tmp/ingestd-configs/dc2.yaml:ro
  #     - ./db-auth.yaml:/tmp/db-auth.yaml:ro
  #     - ./butler-repos/panda-test-med-1-lancs/butler.yaml:/etc/panda-test-med-1-lancs/butler.yaml
  #     - ./butler-repos/hsc-pdr2-multisite/butler.yaml:/etc/hsc-pdr2-multisite/butler.yaml
  #     - ./butler-repos/ccms1/butler.yaml:/etc/ccms1/butler.yaml
  #     - ./butler-repos/dc2/butler.yaml:/etc/panda-test-med-1/butler.yaml
  #   networks:
  #     # Attach to the 'lsst' network
  #     - lsst

  # # IngestD service for HSC PDR2 Multisite dataset
  # ingestd_hsc_pdr2_multisite:
  #   # Image for IngestD
  #   # Check Butler compatibility before updating version
  #   image: ghcr.io/lsst-dm/ctrl_ingestd:1.9
  #   # Container name for IngestD HSC PDR2 Multisite
  #   container_name: ingestd_hsc_pdr2_multisite
  #   depends_on:
  #     # Ensure Kafka broker is healthy before IngestD
  #     broker1:
  #       condition: service_healthy
  #     # Ensure MirrorMaker 2 is running before IngestD
  #     mirrormaker2:
  #       condition: service_started
  #   restart: always
  #   environment:
  #     # Configuration file for IngestD HSC PDR2 Multisite
  #     CTRL_INGESTD_CONFIG: /tmp/ingestd-configs/hsc_pdr2_multisite.yaml
  #     # Database authentication file
  #     LSST_DB_AUTH: /tmp/db-auth.yaml
  #     # Butler repository index file
  #     DAF_BUTLER_REPOSITORY_INDEX: /etc/butler-repos-index.yaml
  #   volumes:
  #     # Mount various configuration and repository files
  #     - ./butler-repos/butler-repos-index.yaml:/etc/butler-repos-index.yaml:ro
  #     - ./ingestd-configs/hsc_pdr2_multisite.yaml:/tmp/ingestd-configs/hsc_pdr2_multisite.yaml:ro
  #     - ./ingestd-configs/ccms1.yaml:/tmp/ingestd-configs/ccms1.yaml:ro
  #     - ./ingestd-configs/dc2.yaml:/tmp/ingestd-configs/dc2.yaml:ro
  #     - ./db-auth.yaml:/tmp/db-auth.yaml:ro
  #     - ./butler-repos/panda-test-med-1-lancs/butler.yaml:/etc/panda-test-med-1-lancs/butler.yaml
  #     - ./butler-repos/hsc-pdr2-multisite/butler.yaml:/etc/hsc-pdr2-multisite/butler.yaml
  #     - ./butler-repos/ccms1/butler.yaml:/etc/ccms1/butler.yaml
  #     - ./butler-repos/dc2/butler.yaml:/etc/panda-test-med-1/butler.yaml
  #   networks:
  #     # Attach to the 'lsst' network
  #     - lsst

  # Kafka REST Proxy service
  rest-proxy:
    # Image for Kafka REST Proxy
    image: confluentinc/cp-kafka-rest:latest
    # Container name for Kafka REST Proxy
    container_name: rest-proxy
    ports:
      # Port mapping for Kafka REST Proxy
      - "8082:8082"
    # Ensure Zookeeper and Kafka broker start before REST Proxy
    depends_on:
      - zookeeper1
      - broker1
    # Restart the container on failure
    restart: always
    # Hostname for Kafka REST Proxy
    hostname: rest-proxy
    # Environment variables for Kafka REST Proxy
    environment:
      # Kafka REST Proxy host name
      KAFKA_REST_HOST_NAME: rest-proxy
      # Kafka bootstrap servers for REST Proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: broker1:9092
      # Listener for REST Proxy - important this is 0.0.0.0; why?
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
    networks:
      # Attach to the 'lsst' network
      - lsst

networks:
  # Define the 'lsst' network with bridge driver
  lsst:
    driver: bridge
