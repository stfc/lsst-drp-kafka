## Docker Compose File for monitoring Kafka messages from USDF

services:
  # Grafana dashboard for monitoring Kafka data via Prometheus
  grafana:
    # Use the enterprise version of Grafana
    image: grafana/grafana-enterprise
    # Container name for Grafana
    container_name: grafana
    # Always restart the container on failure
    restart: always
    environment:
      # Linux terminal emulation
      - TERM=linux
      # increases the log level from info to debug
      - GF_LOG_LEVEL=debug
    ports:
      # Port mapping for Grafana dashboard
      - '3000:3000'
    volumes:
      # Mount provisioning directory
      - ./grafana/provisioning:/etc/grafana/provisioning
      # Mount directory to contain dashoard JSON config files
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      # Volume to store any additional grafana data
      - grafana-data:/var/lib/grafana
    networks:
      # Attach to the 'lsst' network
      - lsst

# Prometheus database for aggregating Kafka broker metrics
  prometheus:
    # Use the latest version of Prometheus
    image: prom/prometheus:latest
    # Container name for Prometheus
    container_name: prometheus
    # Always restart the container on failure
    restart: always
    ports:
      # Port mapping for Prometheus database
      - '9090:9090'
    volumes:
      # Mount prometheus configuration file
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      # Volume to store any additional prometheus data
      - prometheus-data:/prometheus
    command:
      # Command to enable prometheus to use the mounted config file
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      # Attach to the 'lsst' network
      - lsst

  otel-collector:
    # Use the latest version of OpenTelemetry community contributions collector
    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    # Always restart the container on failure
    restart: always
    # Command to link the config file to the OpenTelemetry collector
    command: 
      - "--config=/etc/otel-collector-contrib/config.yaml"
    depends_on:
      # Ensure Zookeeper starts & is running before Kafka broker
      - broker1
    ports:
      - '8889:8889' # Prometheus endpoint
    environment:
      - TMPDIR=/otel-tmp
    volumes:
      # Mount OpenTelemetry collector
      - ./opentelemetry-collector/otel-collector-config.yaml:/etc/otel-collector-contrib/config.yaml:ro
      # Mount JMX exporter binary file
      - ./opentelemetry-collector/opentelemetry-jmx-metrics.jar:/opt/opentelemetry-jmx-metrics.jar:ro
      # Temp data volume for the JMX receiver
      - otel-temp-data:/otel-tmp
      - ./jmx-temp:/otel-tmp/jmx
    networks:
      # Attach to the 'lsst' network
      - lsst

  # alertmanager:
  #   image: prom/alertmanager:latest
  #   restart: unless-stopped
  #   ports:
  #     - '9093:9093'
  #   volumes:
  #     - ./alertmanager:/config
  #     - alertmanager-data:/data
  #   command: --config.file=/config/alertmanager.yml --log.level=debug
  #   networks:
  #     - monitoring

volumes:
  # Volume for additional grafana data stored
  grafana-data: {}

  # Volume for additional grafana data stored
  prometheus-data: {}

  # Volume for temp file data for the JMX receiver
  otel-temp-data: {}
  # alertmanager-data: {}